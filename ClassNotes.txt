-generics do not support pritive datatype
-depend upon wrapper class to work on generics
-generic wildcards, type safety etc.
-jar-java archives

-Maps-keySet,entry,comparable,comparator

-GITHUB-SVT(Source version tool)
	GitGUI
	GitCLI
	cloning operation-copying remote to local
	pushing-sending from local to remote
	pulling-changing in local
	staging-arranging
	commit-sealing 
	branching-parallel copy 


-MAVIN is a build tool
	POM-Project object Model-contains info of project into Project Metadata, Build Plan, Dependency list
	ArtifactID and GroupID to identify MAVIN project
	GroupID-com.cg.ibs ArtifactID-investmentmangement
	Dependency list-3rd party library, made into GroupId and ArtifactID
	
-MAVIN Project Structure-SRC(source-Main and Test)
	Main-java code
	Test-code for running java code
	
What is Maven??
what is project lifecycle??
what are maven goals??

-I/O package-files/serialization
		Byte(Stream) and char(er suffix)

-Date and Calemder java.time package=LocalDate, LocalTime, DateTimeFormat, 

-Regex=match a string with pattern, cardinal metacharacters-{},+,*,?
	{}-m,n
	   0,n
	   m,unbound
	   m
     	?-0or1
	+=1 or more    ^-beggining of line , if used in [] means not
	*=0 or more    $-end of line			
	metaCharacters  \s-a space
			\S-anything other than space
			\d-a digit
			\D-anything but not digit
			\w-a word
			\W-anything but not word


-Serialization and deserialization- Marker Interfaces(without methods)-Serializable and externalizable

-Stream API
-Lambda Expressions/Inline func implementations, anonymous classes(does not have name)-works with interfaces as well as abstract class
	Lamda expression can be applied on interface having only one method(functional interfaces)

-Types functional interfaces=suppliers(returns something but does not accept any parameter), consumers(accepts parameter but return nothing), predicates(returns boolean) and functonal(none of the above)

-Stream-unidirectional=no concept of loops-java.util.Stream
          operations forEach, filter, map, reduce,collector
	foreach-terminal stream operation, accepts a consumer and executes each and every value of datasource

-Multithreading-different from multitasking(related to operating system)
	common sharing of memory in multithreading
	Runnable and Thread class
	Thread LifeCycle-pause, stop,resume
	Thread priorities
	Synchronization and Concurrency
	 




